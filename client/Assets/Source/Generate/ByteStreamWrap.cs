//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ByteStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ByteStream), typeof(System.Object));
		L.RegFunction("Reset", Reset);
		L.RegFunction(".geti", get_Item);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction(".seti", set_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("Clear", Clear);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("ReadBool", ReadBool);
		L.RegFunction("ReadShort", ReadShort);
		L.RegFunction("ReadUShort", ReadUShort);
		L.RegFunction("ReadInt", ReadInt);
		L.RegFunction("ReadUInt", ReadUInt);
		L.RegFunction("ReadLong", ReadLong);
		L.RegFunction("ReadULong", ReadULong);
		L.RegFunction("ReadFloat", ReadFloat);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("Read", Read);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("WriteBool", WriteBool);
		L.RegFunction("WriteShort", WriteShort);
		L.RegFunction("WriteInt", WriteInt);
		L.RegFunction("WriteLong", WriteLong);
		L.RegFunction("WriteUShort", WriteUShort);
		L.RegFunction("WriteUInt", WriteUInt);
		L.RegFunction("WriteULong", WriteULong);
		L.RegFunction("WriteFloat", WriteFloat);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("Write", Write);
		L.RegFunction("New", _CreateByteStream);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Bool_Size", get_Bool_Size, null);
		L.RegVar("Byte_Size", get_Byte_Size, null);
		L.RegVar("Short_Size", get_Short_Size, null);
		L.RegVar("UShort_Size", get_UShort_Size, null);
		L.RegVar("Int_Size", get_Int_Size, null);
		L.RegVar("UInt_Size", get_UInt_Size, null);
		L.RegVar("Long_Size", get_Long_Size, null);
		L.RegVar("ULong_Size", get_ULong_Size, null);
		L.RegVar("Float_Size", get_Float_Size, null);
		L.RegVar("Double_Size", get_Double_Size, null);
		L.RegVar("isBigEndian", get_isBigEndian, set_isBigEndian);
		L.RegVar("position", get_position, set_position);
		L.RegVar("capacity", get_capacity, null);
		L.RegVar("length", get_length, set_length);
		L.RegVar("bytesAvailable", get_bytesAvailable, null);
		L.RegVar("buffer", get_buffer, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateByteStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ByteStream obj = new ByteStream();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				ByteStream obj = new ByteStream(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				ByteStream obj = new ByteStream(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ByteStream.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte o = obj[arg0];
			LuaDLL.lua_pushnumber(L, o);
			return 1;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj[arg0] = arg1;
			return 0;

		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				obj.Reset();
				return 0;
			}
			else if (count == 2)
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Reset(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteStream.Reset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte o = obj[arg0];
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj[arg0] = arg1;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				obj.Clear();
				return 0;
			}
			else if (count == 2)
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.Clear(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteStream.Clear");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			byte o = obj.ReadByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			bool o = obj.ReadBool();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			short o = obj.ReadShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			ushort o = obj.ReadUShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			uint o = obj.ReadUInt();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			long o = obj.ReadLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadULong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			ulong o = obj.ReadULong();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Read(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.Read(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.Read(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteStream.Read");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WriteBool(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteULong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.WriteULong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFloat(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<ByteStream>(L, 2))
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				ByteStream arg0 = (ByteStream)ToLua.ToObject(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], int>(L, 2))
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.Write(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<ByteStream, int>(L, 2))
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				ByteStream arg0 = (ByteStream)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.Write(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<ByteStream, int, int>(L, 2))
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				ByteStream arg0 = (ByteStream)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				ByteStream obj = (ByteStream)ToLua.CheckObject<ByteStream>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteStream.Write");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bool_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.Bool_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Byte_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.Byte_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Short_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.Short_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UShort_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.UShort_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Int_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.Int_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UInt_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.UInt_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Long_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.Long_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ULong_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.ULong_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Float_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.Float_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Double_Size(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, ByteStream.Double_Size);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isBigEndian(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			bool ret = obj.isBigEndian;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isBigEndian on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			int ret = obj.position;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			int ret = obj.capacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index capacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			int ret = obj.length;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index length on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bytesAvailable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			int ret = obj.bytesAvailable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bytesAvailable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_buffer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			byte[] ret = obj.buffer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index buffer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isBigEndian(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isBigEndian = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isBigEndian on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_length(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ByteStream obj = (ByteStream)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.length = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index length on a nil value");
		}
	}
}

